version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    # The application port is exposed. Default is 4000.
    # It can be overridden by setting APP_PORT in a .env file.
    # ports:
    #   - "${APP_PORT}:4000" # Removed: Nginx will handle external port mapping
    # Mount the current directory (project root) into /app in the container.
    # This allows live code reloading during development.
    volumes:
      - .:/app
    # Environment variables for the application.
    # MIX_ENV is set to 'dev'.
    # Database connection details are placeholders and will be used by Phoenix.
    # These should ideally be managed via a .env file for local development.
    environment:
      - MIX_ENV=dev
      - DATABASE_HOST=postgres_primary
      - DATABASE_USER=${PRIMARY_DB_USER}
      - DATABASE_PASSWORD=${PRIMARY_DB_PASS}
      - DATABASE_NAME=${PRIMARY_DB_NAME}
      - DATABASE_PORT=5432 # Internal port for PostgreSQL
      # REPLICA_DATABASE_HOST will be used later for the read replica configuration.
      - REPLICA_DATABASE_HOST=postgres_replica
      - BTCPAY_WEBHOOK_SECRET=${BTCPAY_WEBHOOK_SECRET}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    # The 'app' service depends on 'postgres_primary' and 'postgres_replica'
    # to ensure the databases are healthy before the application attempts to connect.
    depends_on:
      postgres_primary:
        condition: service_healthy
      postgres_replica:
        condition: service_healthy
    # The command to start the Phoenix server will be added in Step 1.2 after project initialization.
    # e.g., command: mix phx.server
    command: sh -c "mix ecto.setup && mix phx.server"
    restart: unless-stopped # Added for app service consistency

  nginx: # New Nginx service
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      app:
        condition: service_started # Nginx can start once app container starts
    restart: unless-stopped

  postgres_primary:
    image: postgres:15 # Using PostgreSQL version 15
    # Expose the primary database port. Default is 5432 on the host.
    # Can be overridden by PRIMARY_DB_EXPOSED_PORT in a .env file.
    ports:
      - "${PRIMARY_DB_EXPOSED_PORT}:5432"
    volumes:
      # Persist PostgreSQL data using a named volume.
      - pgdata_primary:/var/lib/postgresql/data
      # Mount custom PostgreSQL configuration files
      - ./docker/postgres/primary/postgresql.conf:/usr/share/postgresql/postgresql.conf.sample
      - ./docker/postgres/primary/pg_hba.conf:/usr/share/postgresql/pg_hba.conf.sample
    command: ["postgres", "-c", "config_file=/usr/share/postgresql/postgresql.conf.sample", "-c", "hba_file=/usr/share/postgresql/pg_hba.conf.sample"]
    environment:
      - POSTGRES_USER=${PRIMARY_DB_USER}
      - POSTGRES_PASSWORD=${PRIMARY_DB_PASS}
      - POSTGRES_DB=${PRIMARY_DB_NAME}
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PRIMARY_DB_USER:-postgres} -d ${PRIMARY_DB_NAME:-btcpay_tracker_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  postgres_replica:
    image: postgres:15 # Using PostgreSQL version 15
    # Expose the replica database on a different host port to avoid conflicts.
    # Default is 5433 on the host. Can be overridden by REPLICA_DB_EXPOSED_PORT.
    ports:
      - "${REPLICA_DB_EXPOSED_PORT}:5432"
    volumes:
      # Persist PostgreSQL replica data using a named volume.
      - pgdata_replica:/var/lib/postgresql/data
      # Mount custom PostgreSQL configuration file for the replica
      - ./docker/postgres/replica/postgresql.conf:/usr/share/postgresql/postgresql.conf.sample
    environment:
      # These are not for setting up the DB, but for pg_basebackup and recovery
      - PGUSER=${POSTGRES_REPLICATION_USER} # User for pg_basebackup
      - PGPASSWORD=${POSTGRES_REPLICATION_PASSWORD} # Password for pg_basebackup
      - PGHOST=postgres_primary # Host to connect for pg_basebackup
      - PGPORT=5432
      # Dummy values, as the data dir will be wiped and populated by pg_basebackup
      - POSTGRES_USER=dummy_user # This is not the connecting user for healthcheck
      - POSTGRES_PASSWORD=dummy_password
      - POSTGRES_DB=dummy_db
      # Environment variables for the healthcheck (using primary's credentials as they should be replicated)
      - HEALTHCHECK_DB_USER=${PRIMARY_DB_USER}
      - HEALTHCHECK_DB_NAME=${PRIMARY_DB_NAME}
    depends_on:
      postgres_primary:
        condition: service_healthy # Replica setup depends on primary being healthy
    command: >
      sh -c "
        if [ ! -d /var/lib/postgresql/data ]; then mkdir -p /var/lib/postgresql/data; fi && \
        chown -R postgres:postgres /var/lib/postgresql /var/lib/postgresql/data && \
        chmod 700 /var/lib/postgresql/data && \
        rm -rf /var/lib/postgresql/data/* && \
        echo 'Waiting for primary to be ready for replica setup...' && \
        until gosu postgres pg_isready -h postgres_primary -p 5432 -U ${POSTGRES_REPLICATION_USER:-replicator}; do \
          sleep 1; \
        done; \
        echo 'Primary is ready. Running pg_basebackup for replica...' && \
        gosu postgres pg_basebackup -h postgres_primary -p 5432 -U ${POSTGRES_REPLICATION_USER:-replicator} -D /var/lib/postgresql/data -Fp -Xs -P -R -S replication_slot_slave1 && \
        echo 'Base backup complete for replica. Verifying ownership and permissions...' && \
        gosu postgres ls -ld /var/lib/postgresql/data && \
        gosu postgres find /var/lib/postgresql/data -maxdepth 1 -ls && \
        echo 'Starting replica PostgreSQL instance...' && \
        exec gosu postgres postgres -D /var/lib/postgresql/data -c config_file=/usr/share/postgresql/postgresql.conf.sample
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${HEALTHCHECK_DB_USER:-postgres} -d ${HEALTHCHECK_DB_NAME:-btcpay_tracker_dev} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s # Replica might take longer to initialize after base backup
    restart: unless-stopped

# Named volumes for data persistence.
volumes:
  pgdata_primary:
  pgdata_replica: 